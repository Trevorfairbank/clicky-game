{"version":3,"sources":["components/headerimage.png","components/Navbar.js","components/Header.js","components/Main.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Navbar","react_default","a","createElement","className","Header","src","apexLineup","alt","width","height","Main","props","console","log","images","map","image","handleimageclick","handleImageClick","key","id","process","fileName","Footer","randomLegendId","max","length","Math","floor","random","App","state","clicks","score","currentLegendId","newState","_this","setState","components_Navbar","components_Header","components_Main","this","components_Footer","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"udAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,8OCYzBC,MAVf,WACI,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qBACXH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,gBAAd,uBACAH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,gBAAd,4BACAH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,gBAAd,6CCUGC,MAdf,WACI,OACIJ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACXH,EAAAC,EAAAC,cAAA,OAAKG,IAAKC,IAAYC,IAAI,OAAOC,MAAM,QAAQC,OAAO,UACtDT,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,WAAd,6EAEJH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,WAAd,8CCIDO,MAZf,SAAcC,GAEV,OADJC,QAAQC,IAAIF,GAEJX,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACVW,EAAOC,IAAI,SAAAC,GAAK,OAAIhB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aAAac,iBAAkBN,EAAMO,iBAAiBC,IAAKH,EAAMI,GAAIf,IAAKgB,oBAAmCL,EAAMM,SAAUf,IAAI,wBCItKgB,MAVf,WACI,OACIvB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,wBACXH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,gBAAd,uBACAH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,gBAAd,4BACAH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,gBAAd,6BCKNqB,EAAiB,kBAAMV,GAHVW,EAG4BX,EAAOY,OAH5BC,KAAKC,MAAMD,KAAKE,SAAWJ,KAGUL,GAH5C,IAAAK,GAwCJK,6MAhCbC,MAAO,CACLC,OAAQ,EACRC,MAAO,EACPC,gBAAiBV,OAInBN,iBAAmB,SAAAE,GACjBR,QAAQC,IAAIO,GACZ,IAAMe,EAAW,CAAEH,OAAQI,EAAKL,MAAMC,OAAS,GAG3CZ,IAAOgB,EAAKL,MAAMG,kBAEpBC,EAASF,MAAQG,EAAKL,MAAME,MAAQ,GAGxCG,EAAKC,SAASF,4EAId,OACEnC,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAACoC,EAAD,MACAtC,EAAAC,EAAAC,cAACqC,EAAD,MACAvC,EAAAC,EAAAC,cAACsC,EAAD,CAAMvB,iBAAkBwB,KAAKvB,mBAC7BlB,EAAAC,EAAAC,cAACwC,EAAD,cA5BcC,IAAMC,WCHJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAOnD,EAAAC,EAAAC,cAACkD,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.b2b271b0.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/headerimage.0d471eb9.png\";","import React from \"react\";\n\nfunction Navbar() {\n    return (\n        <div className=\"navbar sticky-top\">\n            <h3 className=\"navbar-brand\">APEX Legends Clicks</h3>\n            <h3 className=\"navbar-brand\">Click an image to begin!</h3>\n            <h3 className=\"navbar-brand\">SCORE: 0 | Top Score: 0</h3>\n        </div>\n    );\n}\n\nexport default Navbar;\n","import React from \"react\";\nimport apexLineup from './headerimage.png';\n\nfunction Header() {\n    return (\n        <div className=\"header\">\n            <img src={apexLineup} alt=\"Apex\" width=\"850px\" height=\"380px\"></img>\n            <div className=\"row\">\n                <h3 className=\"mx-auto\">Click on an image to earn points, but don't click on any more than once!</h3>\n            </div>\n            <div className=\"row space\">\n                <h3 className=\"mx-auto\">⬇Scroll Down to Begin⬇</h3>\n            </div>\n        </div>\n    );\n}\n\nexport default Header;","import React from \"react\";\nimport images from \"../images.json\"\n\nfunction Main(props) {\nconsole.log(props);\n    return (\n        <div className=\"container\">\n            <div className=\"row mx-auto\">\n                {images.map(image => <img className=\"click-item\" handleimageclick={props.handleImageClick}key={image.id} src={process.env.PUBLIC_URL + '/img/' + image.fileName} alt=\"Apex-character\"/>)}\n            </div>\n        </div>\n    );\n}\n\n\nexport default Main;\n","import React from \"react\";\n\nfunction Footer() {\n    return (\n        <div className=\"navbar sticky-bottom\">\n            <h3 className=\"navbar-brand\">APEX Legends Clicks</h3>\n            <h3 className=\"navbar-brand\">Click an image to begin!</h3>\n            <h3 className=\"navbar-brand\">SCORE: 0 | Top Score: 0</h3>\n        </div>\n    );\n}\n\nexport default Footer;\n","import React from 'react';\nimport './App.css';\nimport Navbar from \"./components/Navbar\";\nimport Header from \"./components/Header\";\nimport Main from \"./components/Main\";\nimport Footer from \"./components/Footer\";\nimport images from \"./images.json\"\n\n// pick a random number up to but not including max\nconst pickRandom = max => Math.floor(Math.random() * max)\n\n// pick out a random pup\nconst randomLegendId = () => images[pickRandom(images.length)].id\n\n\nclass App extends React.Component {\n  \n  state ={\n    clicks: 0,\n    score: 0,\n    currentLegendId: randomLegendId()\n  }\n\n  //when image is clicked\n  handleImageClick = id => {\n    console.log(id);\n    const newState = { clicks: this.state.clicks + 1 }\n\n    // did the user click the current Legend\n    if (id === this.state.currentLegendId) {\n      // increase score\n      newState.score = this.state.score + 1\n\n  }\n  this.setState(newState);\n}\n  \n  render() {\n  return (\n    <div>\n    <Navbar />\n    <Header />\n    <Main handleimageclick={this.handleImageClick} />\n    <Footer />\n    </div>\n  );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}